Imports UtilityWizards.CommonCore.Common
Imports UtilityWizards.CommonCore.Shared.Common
Imports Telerik.Web.UI

Public Class Search
    Inherits builderPage

#Region "Properties"

    Private ReadOnly Property ModId As Integer
        Get
            Return Request.QueryString("modid").ToInteger
        End Get
    End Property
    Private ReadOnly Property CustAcctNum As String
        Get
            Return Request.QueryString("custacctnum")
        End Get
    End Property
    Private ReadOnly Property FilterID As Integer
        Get
            Return Request.QueryString("id").ToInteger
        End Get
    End Property
    Private ReadOnly Property Assignments As Boolean
        Get
            Return Request.QueryString("Assignments").ToBoolean
        End Get
    End Property
    Private ReadOnly Property ShowCompleted As Boolean
        Get
            Return Request.QueryString("showcompleted").ToBoolean
        End Get
    End Property

#End Region

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load
        If Not IsPostBack Then
            Me.Master.TitleText = GetFolderName(App.ActiveFolderID) & " > " & App.ActiveModule.Name & " Module"

            'Me.RadSearchGrid.AutoGenerateDeleteColumn = (App.CurrentUser.IsAdminUser Or App.CurrentUser.IsSysAdmin)

            If Me.OnPhone Then
                Me.tblSearchOptions.Visible = False

                Me.RadSearchGrid.Visible = False
                Me.RadSearchGridMobile.Visible = True
                Me.LoadMobileData()
            Else
                Me.tblSearchOptions.Visible = True

                Me.RadSearchGrid.Visible = True
                Me.RadSearchGridMobile.Visible = False
            End If

            ' generic work orders for wadesboro come straight here
            Me.tblNewWorkOrder.Visible = (App.ActiveModule.ID = 108)

            If Me.tblSearchOptions.Visible = True Then
                Me.LoadLists()
                btnApply_Click(Nothing, New EventArgs)
            End If
        End If
    End Sub

    Private Sub LoadLists()
        Me.ddlSearchField.Items.Clear()
        Me.cblStatus.Items.Clear()

        ' search fields
        Me.ddlSearchField.Items.Add(New ListItem("ID", "sys_ID"))
        Me.ddlSearchField.Items.Add(New ListItem("Customer Account", "sys_xCustAcctNum"))
        Me.ddlSearchField.Items.Add(New ListItem("Priority", "sys_xPriority"))
        Me.ddlSearchField.Items.Add(New ListItem("Updated By", "sys_xUserEmail"))
        Me.ddlSearchField.Items.Add(New ListItem("Service Address", "sys_xCustServiceAddress"))

        Dim lstFields As List(Of String) = Me.SearchFieldList
        For Each s As String In lstFields
            Dim addItem As Boolean = True
            If s.ToLower.Contains("date") And (s.ToLower.Contains("created") Or s.ToLower.Contains("modified") Or s.ToLower.Contains("updated")) Then
                addItem = False
            End If

            If addItem Then
                Dim itmText As String = s.Split("^"c)(0)
                Dim itmValue As String = s.Split("^"c)(1)
                Me.ddlSearchField.Items.Add(New ListItem(itmText, itmValue))
            End If
        Next

        ' status check box list
        Dim enumValues As Array = System.[Enum].GetValues(GetType(Enums.SystemModuleStatus))
        For Each resource As Enums.SystemModuleStatus In enumValues
            Dim itm As New ListItem(resource.ToString, CStr(resource))
            If Me.ShowCompleted Then
                ' show only the completed work orders
                itm.Selected = resource.ToString.ToLower.Contains("completed")
            Else
                ' show all but completed
                itm.Selected = (Not resource.ToString.ToLower.Contains("completed"))
            End If
            Me.cblStatus.Items.Add(itm)
        Next

        If Me.ModId = 0 Then
            Me.ddlDatePresets.SelectedValue = "all"
            ddlDatePresets_SelectedIndexChanged(Nothing, New EventArgs)
        Else
            Me.ddlDatePresets.SelectedValue = "month"
            ddlDatePresets_SelectedIndexChanged(Nothing, New EventArgs)
        End If

        Me.ddlDateType.SelectedValue = "both"
    End Sub

    Private Sub LoadMobileData()
        If (App.CurrentUser.Permissions = Enums.SystemUserPermissions.Administrator Or
            App.CurrentUser.Permissions = Enums.SystemUserPermissions.Supervisor Or
            App.CurrentUser.Permissions = Enums.SystemUserPermissions.SystemAdministrator) Then

            Me.SqlDataSource1.SelectCommand = "SELECT * FROM [vwMobileWorkOrders] WHERE ([SupervisorID] = " & App.CurrentUser.ID & " AND [xModuleID] = " & Me.ModId & ")"
        Else Me.SqlDataSource1.SelectCommand = "SELECT * FROM [vwMobileWorkOrders] WHERE ([AssignedToID] = " & App.CurrentUser.ID & " AND [xModuleID] = " & Me.ModId & ")"
        End If

        Me.SqlDataSource1.SelectCommand = "SELECT * FROM [vwMobileWorkOrders] WHERE [xModuleID] = " & Me.ModId & ""
    End Sub

    Private Function SearchFieldList() As List(Of String)
        Dim retVal As New List(Of String)

        If Me.ModId = 0 Then
            App.ActiveModule = New SystemModule()
        End If

        ' add the folder search fields
        If App.ActiveModule.FolderID > 0 Then
            Dim folderName As String = GetFolderName(App.ActiveModule.FolderID)

            For Each q As SystemQuestion In App.RootFolderQuestions
                If q.SearchField Then
                    retVal.Add(folderName & ": " & q.Question & "^" & folderName & "|" & q.DataFieldName)
                End If
            Next
        End If

        ' add the module search fields
        For Each q As SystemQuestion In App.ActiveModuleQuestions
            If q.SearchField Then
                retVal.Add(q.Question & "^" & q.DataFieldName)
            End If
        Next

        Return retVal
    End Function

    Private Function LoadSearchFields() As String
        Dim retVal As String = ""

        If Me.ModId = 0 Then
            App.ActiveModule = New SystemModule()
        End If

        ' add the folder search fields
        If App.ActiveModule.FolderID > 0 Then
            Dim folderName As String = GetFolderName(App.ActiveModule.FolderID)

            For Each q As SystemQuestion In App.RootFolderQuestions
                If q.SearchField Then
                    If retVal = "" Then
                        retVal = "ISNULL(xmlData.value('(/Data/" & folderName & "/" & q.DataFieldName & "/text())[1]', 'varchar(255)'), '') AS [" & q.Question & "]"
                    Else retVal &= ", ISNULL(xmlData.value('(/Data/" & folderName & "/" & q.DataFieldName & "/text())[1]', 'varchar(255)'), '') AS [" & q.Question & "]"
                    End If
                End If
            Next
        End If

        ' add the module search fields
        For Each q As SystemQuestion In App.ActiveModuleQuestions
            If q.SearchField Then
                If retVal = "" Then
                    retVal = "ISNULL(xmlData.value('(/Data/" & q.DataFieldName & "/text())[1]', 'varchar(255)'), '') AS [" & q.Question & "]"
                Else retVal &= ", ISNULL(xmlData.value('(/Data/" & q.DataFieldName & "/text())[1]', 'varchar(255)'), '') AS [" & q.Question & "]"
                End If
            End If
        Next

        Return retVal
    End Function

    Private Function BuildSearchParameters() As List(Of SqlClient.SqlParameter)
        Dim retVal As New List(Of SqlClient.SqlParameter)

        retVal.Add(New SqlClient.SqlParameter("@fields", Me.LoadSearchFields))
        retVal.Add(New SqlClient.SqlParameter("@clientID", App.CurrentClient.ID))
        retVal.Add(New SqlClient.SqlParameter("@moduleID", Me.ModId))
        retVal.Add(New SqlClient.SqlParameter("@CustAcctNum", If(Me.CustAcctNum Is Nothing, "", Me.CustAcctNum)))

        Dim includedStatus As String = ""
        For Each itm As ListItem In Me.cblStatus.Items
            If itm.Selected Then
                If includedStatus = "" Then includedStatus = "'" & itm.Value & "'" Else includedStatus &= ",'" & itm.Value & "'"
            End If
        Next
        retVal.Add(New SqlClient.SqlParameter("@includedStatus", includedStatus))

        Dim customSearch As String = ""
        If Me.txtSearchValue.Text.Trim <> "" Then
            If Me.ddlSearchField.SelectedValue.ToLower.StartsWith("sys_x") Then
                ' system field so don't use xQuery
                customSearch = Me.ddlSearchField.SelectedValue.Replace("sys_x", "x") & " "
            Else customSearch = "xmlData.value('(/Data/" & Me.ddlSearchField.SelectedValue.Replace("|", "/") & "/text())[1]', 'varchar(255)') "
            End If
            Select Case Me.ddlSearchComparison.SelectedValue.ToLower
                Case "startswith"
                    customSearch &= "LIKE '[value]%'"
                Case "endswith"
                    customSearch &= "LIKE '%[value]'"
                Case "contains"
                    customSearch &= "LIKE '%[value]%'"
                Case "equals"
                    customSearch &= "LIKE '[value]'"
            End Select
            customSearch = customSearch.Replace("[value]", Me.txtSearchValue.Text)
        End If
        retVal.Add(New SqlClient.SqlParameter("@customSearch", customSearch))

        retVal.Add(New SqlClient.SqlParameter("@dateType", Me.ddlDateType.SelectedValue.ToLower))
        retVal.Add(New SqlClient.SqlParameter("@startDate", Me.txtStartDate.Text))
        retVal.Add(New SqlClient.SqlParameter("@endDate", Me.txtEndDate.Text))

        Return retVal
    End Function

    Private Sub RadSearchGrid_EditCommand(sender As Object, e As GridCommandEventArgs) Handles RadSearchGrid.EditCommand
        e.Canceled = True

        Dim modId As Integer = Me.ModId
        If modId = 0 Then modId = e.Item.Cells(9).Text.ToInteger
        App.ActiveModule = New SystemModule(modId)
        App.ActiveFolderID = App.ActiveModule.FolderID

        Response.Redirect("~/account/Module.aspx?modid=" & modId & "&id=" & e.Item.Cells(3).Text & "&custacctnum=" & e.Item.Cells(4).Text, False)
    End Sub

    Private Sub RadSearchGrid_DeleteCommand(sender As Object, e As GridCommandEventArgs) Handles RadSearchGrid.DeleteCommand
        e.Canceled = True
    End Sub

    Private Sub RadSearchGrid_NeedDataSource(sender As Object, e As GridNeedDataSourceEventArgs) Handles RadSearchGrid.NeedDataSource
        Dim cn As New SqlClient.SqlConnection(ConnectionString)

        Try
            Me.RadSearchGrid.Visible = True

            Dim cmd As New SqlClient.SqlCommand("procSearchGrid_new", cn)
            If cmd.Connection.State = ConnectionState.Closed Then cmd.Connection.Open()
            cmd.CommandType = CommandType.StoredProcedure
            cmd.Parameters.AddRange(Me.BuildSearchParameters.ToArray)

            Dim rs As SqlClient.SqlDataReader = cmd.ExecuteReader

            Me.RadSearchGrid.DataSource = rs

        Catch ex As Exception
            ex.WriteToErrorLog(New ErrorLogEntry(App.CurrentUser.ID, App.CurrentClient.ID, Enums.ProjectName.Builder))
        Finally
            'cn.Close()
        End Try
    End Sub

    Private Sub RadSearchGrid_ItemCreated(sender As Object, e As GridItemEventArgs) Handles RadSearchGrid.ItemCreated
        If TypeOf e.Item Is GridDataItem Then
            AddHandler e.Item.PreRender, AddressOf RadSearchGrid_ItemPreRender
        End If
    End Sub

    Protected Sub RadSearchGrid_ItemPreRender(ByVal sender As Object, ByVal e As EventArgs)
        ' this event fires when the user checks a box or expands a category
        Dim itm As GridItem = CType(sender, GridDataItem)

        ' change priority to red if emergency
        If itm.Cells(6).Text.ToLower = Enums.SystemModulePriority.Emergency.ToString.ToLower Then
            itm.Cells(6).Text = "<span style='color:#FFFFFF;'>" & itm.Cells(6).Text & "</span>"
        ElseIf itm.Cells(6).Text.ToLower = Enums.SystemModulePriority.Emergency.ToString.ToLower Then
            'itm.Cells(6).Text = "<span style='color:#FF6600;'>" & itm.Cells(6).Text & "</span>"
        End If

        ' change out the enum value from status to the text
        itm.Cells(7).Text = CType(itm.Cells(7).Text.ToInteger, Enums.SystemModuleStatus).ToString
        itm.Cells(8).Text = GetModuleName(itm.Cells(8).Text.ToInteger)
    End Sub

    Private Sub RadSearchGrid_ItemDataBound(sender As Object, e As GridItemEventArgs) Handles RadSearchGrid.ItemDataBound
        Try
            If TypeOf e.Item Is GridItem Then
                Dim dataItem As GridItem = e.Item
                If dataItem.Cells(6).Text.ToLower = Enums.SystemModulePriority.Emergency.ToString.ToLower Then
                    dataItem.BackColor = GetColor("#CC0000")
                ElseIf dataItem.Cells(6).Text.ToLower = Enums.SystemModulePriority.High.ToString.ToLower Then
                    dataItem.BackColor = GetColor("#FF6600")
                End If
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Sub RadSearchGridMobile_SelectedIndexChanged(sender As Object, e As EventArgs) Handles RadSearchGridMobile.SelectedIndexChanged
        Dim dataItem As GridItem = RadSearchGridMobile.SelectedItems(0)
        App.ActiveFolderID = dataItem.Cells(6).Text.ToInteger
        App.ActiveModule = New SystemModule(dataItem.Cells(5).Text.ToInteger)
        App.Mobile_SupervisorID = dataItem.Cells(7).Text.ToInteger
        App.Mobile_TechnicianID = dataItem.Cells(8).Text.ToInteger
        Response.Redirect("~/account/Module.aspx?modid=" & Me.ModId & "&id=" & dataItem.Cells(4).Text & "&custacctnum=" & dataItem.Cells(9).Text & "&assignments=" & Me.Assignments, False)
    End Sub

    Private Sub RadSearchGridMobile_ItemDataBound(sender As Object, e As GridItemEventArgs) Handles RadSearchGridMobile.ItemDataBound
        Try
            If TypeOf e.Item Is GridItem Then
                Dim dataItem As GridItem = e.Item
                If IsNumeric(dataItem.Cells(3).Text) Then
                    If dataItem.Cells(3).Text = CStr(Enums.SystemModulePriority.Emergency) Then
                        dataItem.BackColor = GetColor("#EF4444")
                    Else dataItem.BackColor = GetColor("#27AAD0")
                    End If
                End If
            End If
        Catch ex As Exception
        End Try
    End Sub

    Private Sub lnkNew_Click(sender As Object, e As EventArgs) Handles lnkNew.Click
        Response.Redirect("~/account/ModuleLandingPage.aspx?t=" & CStr(Enums.TransactionType.[New]) & "&modid=" & Me.ModId, False)
    End Sub

    Private Sub btnNewWorkOrder_Click(sender As Object, e As EventArgs) Handles btnNewWorkOrder.Click
        Response.Redirect("~/account/Module.aspx?modid=" & Me.ModId & "&custacctnum=&locationnum=", False)
    End Sub

    Protected Sub ddlDatePresets_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ddlDatePresets.SelectedIndexChanged
        Dim dtStart As Date
        Dim dtEnd As Date = Now.Date

        Select Case Me.ddlDatePresets.SelectedValue.ToLower
            Case "today"
                dtStart = Now.Date
            Case "week"
                Dim today As Date = Date.Today
                Dim dayDiff As Integer = today.DayOfWeek - DayOfWeek.Monday
                Dim monday As Date = today.AddDays(-dayDiff)
                dtStart = monday
            Case "month"
                dtStart = New Date(Now.Year, Now.Month, 1)
            Case "1month"
                If Now.Month = 1 Then
                    ' january so pull last december
                    dtStart = New Date(Now.Year - 1, 12, 1)
                    dtEnd = New Date(Now.Year - 1, 12, System.DateTime.DaysInMonth(Now.Year - 1, 12))
                Else
                    dtStart = New Date(Now.Year, Now.Month - 1, 1)
                    dtEnd = New Date(Now.Year, Now.Month - 1, System.DateTime.DaysInMonth(Now.Year, Now.Month - 1))
                End If
            Case "3months"
                dtStart = Now.Date.AddMonths(-3)
            Case "6months"
                dtStart = Now.Date.AddMonths(-6)
            Case "all"
                dtStart = Now.Date.AddMonths(-12)
        End Select

        If Not Me.ddlDatePresets.SelectedValue.ToLower = "custom" Then
            Me.txtStartDate.Text = FormatDateTime(dtStart, vbShortDate)
            Me.txtEndDate.Text = FormatDateTime(dtEnd, vbShortDate)
        Else
            Me.txtStartDate.Text = ""
            Me.txtEndDate.Text = ""
        End If
    End Sub

    Protected Sub btnApply_Click(sender As Object, e As EventArgs) Handles btnApply.Click
        Me.RadSearchGrid.Rebind()
        Me.RunClientScript("UpdateSearchDescription();")
    End Sub
End Class